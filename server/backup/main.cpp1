#include <iostream>

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>

void error(const char *msg){
    perror(msg);
    exit(1);
}
int setupSocket(int portno){
    int socketId = socket(AF_INET, SOCK_STREAM, 0);
    if(socketId <0){
        error("ERROR opening socket \n");
    }
   
    struct sockaddr_in serv_addr;
    bzero((char*)&serv_addr, sizeof(serv_addr)); 
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(portno);

    if(bind(socketId, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0){
        error("ERROR on binding \n");
    }
    
    listen(socketId, 5);
    return socketId;
}
int acceptConnections(int serv_sock){
    unsigned int clilen;
    struct sockaddr_in cli_addr;
    clilen = sizeof(cli_addr);
    int newConn = accept(serv_sock, (struct sockaddr*)& cli_addr, &clilen);   
    if(newConn < 0){
        error("ERROR on accept\n");
    }
    
    std::cout<<"connected "<<cli_addr.sin_addr.s_addr<<"\n";   
    return newConn;
}
int main(int argc, char* argv[]){
    std::cout<<"Hello World \n";
    if(argc < 2){
        fprintf(stderr, "ERROR, no port provided \n");
        exit(1);
    }
    int sockfd, newsockfd, portno;
    portno = atoi(argv[1]);
    char buffer[256];
    int n;

    sockfd = setupSocket(portno);


    newsockfd = acceptConnections(sockfd); 

    bzero(buffer, 256);    
    n = read(newsockfd, buffer, 255);
    if(n < 0 ){
        error("ERROR reading from socket \n");
    }
    printf("client says : %s", buffer);
    
    n = write(newsockfd, "I got your message", 18);
    if(n < 0){
        error("ERROR writing to socket\n");
    }
    close(newsockfd);
    close(sockfd);
    return 0;
}
